.. vi: syntax=rst

=============
Risk Analysis
=============

Documentation with RST
======================

Purpose
-------

There are two purpose of this file 

- provide an example for templating

- analyse advantages and disadvantages (|ruw|)

when documentating with RST.

Introduction to risk analysis
-----------------------------

Risk analysis is basically a simulation.

.. _`rqp`:

Event: A possible and recurring configuration of values of variables.

.. _`rvl`:

Probability: `p`. Compares the mutually exclusive values of one variable of which at least one occurs (exhaustiveness).

.. _`rme`:

Frequency: `f`. How often an event is observed per time interval.

.. _`rop`:

Rating: `v`. Judge an event by associating a value expressing harm/benefit, loss/profit or advantage/disadvantage.

<%
from sympy import Symbol,Function,Eq,latex,N
f_e,v_e = Symbol('f_e'),Symbol('v_e')
r = lambda f,v: f*v
r_e = Eq(Function('r_e'),r(f_e,v_e))
%>

.. _`r5c`:

Risk: `r`. The risk is frequency * rating: 

.. _`r12`:

.. math::
    :name:

    {{latex(r_e)}}


The total risk `R` sums over all events:

.. _`ruf`:

.. math::
    :name:

    R = \sum_e r_e


.. _`rbi`:

:rbi: 

Events can depend on other events functionally or statistically. 
One can start with the probability for an event once a day and then
follow conditional probability chains to other events.

The risk analysis tries to analyse these dependencies 
to get to a more precise estimation of the frequency.

It is hard to get good estimates of frequency of an event in a complex real world,
because there are 

- many variables 
- many dependencies
- unknown probabilities 

.. _`rhq`:

:rhq: 

Because the frequencies will be inaccurate, 
instead of numbers one often uses more unprecise but realistic values,
that need to be defined for the special area (|rd7|).

.. _`rd7`:

|rd7|: Occurrence values for a medical device

.. list-table::
   :widths: 10 40 50
   :header-rows: 1


   * - Number
     - Category
     - Explanation

   * - 1
     - Unimaginable
     - Never occurs in the lifetime of device

   * - 2
     - Improbable
     - Occurs once in the lifetime of device

   * - 3
     - Remote imaginable
     - Occurs once in 100 applications

   * - 4
     - Sometimes
     - Occurs once in 10 applications

   * - 5
     - Probable
     - Occurs once per applications

   * - 6
     - Frequent
     - Occurs multiple times per applications


The rating depends on the 

- area (health sector, finance, ...) and the 
- circumstances (war or peace, rich or poor, ...)

|r0u| shows *severity* rating in the health sector.

.. _`r0u`:

|r0u|: Severity

.. list-table::
   :name:
   :widths: 10 40 50
   :header-rows: 1


   * - Number
     - Category
     - Explanation

   * - 1
     - Non-essential
     - Minor injury not needing medical intervention

   * - 2
     - Minor
     - Small to moderate injury

   * - 3
     - Critical
     - Severe injury or death

   * - 4
     - Catastrophical
     - Multiple deaths


In this discrete description, risk value could be 

:ac: acceptable
:alarp: as low as reasonably practicable
:nac: not acceptable

The risk function is defined by a table.
The total risk can 

- count each risk value occurrence
- count each cell occurrence in the risk table (|rlu|)

.. _`rlu`:

|rlu|: Occurrence/Severity matrix.
       AC, NAC, ALARP are counts of events in the respective cell.

.. list-table::
   :name:
   :widths: 20 20 20 20 20
   :header-rows: 1


   * - **Risk R**
     -
     - 
     - 
     - 

   * - **O\S**
     - **1**
     - **2**
     - **3**
     - **4**

   * - **6**
     - ALARP
     - NAC
     - NAC
     - NAC

   * - **5**
     - ALARP
     - ALARP
     - NAC
     - NAC

   * - **4**
     - ALARP
     - ALARP
     - ALARP
     - NAC

   * - **3**
     - AC
     - ALARP
     - ALARP
     - ALARP

   * - **2**
     - AC
     - AC
     - ALARP
     - ALARP

   * - **1**
     - AC
     - AC
     - AC
     - ALARP

Countermeasures
```````````````

.. _`r2m`:

:r2m: 

The purpose of the risk analysis is not to make a yes/no decision for a project, 
but to derive *countermeasures* that reduce the risk or prevent harm or financial loss.

The countermeasures change the probability of the events, by changing the causal dependencies between events.

The rating probably will not change, unless circumstances change.

In the Occurrence/Severity example, in |rlu|:

- before the measures: events are possibly in the upper right corner
- after the measures: events are ideally only in the lower left corner
- the events in the top/left to right/bottom diagonal have a trade-off
  and should be kept "as low as reasonably practicable"


.. _`ruw`:

Risk analysis for documenting with RST
--------------------------------------

.. _`rp5`:

:rp5: 

This risk analysis compares to the above `risk analysis`_ introduction in this way:

- Event is the need for the developer to perform a task
- Time consumed per event corresponds to severity (per developer)
- Occurrence (per developer) stays the same.

The countermeasures taken lead to:

- RST for documentation instead of MS Word or Libre Office

Instead of the discrete values, numbers are used for time and occurrence.
The numbers are rough estimates, because they depend a lot:

- on the developer
- on the tools he uses (editor and plugins)
- how well he knows his tools
- which phase the development is in
- how long the project takes
- how much documentation there is

The risk |ruf| is the effort per developer.

.. _`rxj`:

.. math::
    :name:

    R = \sum_{e}v_e f_e

|rxj|: 

- `e`: event to perform a task
- `v_e`: time consumed for task
- `f_e`: how often per day the task `e` occurs
- `R`: total effort per developer

The following events have a 

- one-line description
- occurrence `f`
- countermeasure
- the effort `v_1` [min] before countermeasure
- the effort `v_2` [min] after countermeasure

As a check for the estimation `\sum f v_1` should give `1d = 8h = 480\text{min}`.

The estimates assume a project that takes 

- about a year 
- has 5 team members
- needs to be consistently documented

Events
``````

.. start parsing events

.. list-table::
   :widths: 40 15 15 15 15
   :header-rows: 1


   * - description
     - occurences
     - measure
     - time1/min
     - time2/min

   * - Include documentation in the build system
     - 1/5/365
     - |sxr|
     - 0
     - 10

   * - Create separate version of documentation file (e.g. doc_1.1.docx)
     - 1/5/100
     - |s10|
     - 10
     - 0

   * - Look for file and open in editor then open another file in another tool (office application)
     - 20
     - |sed|
     - 1
     - 1/10

   * - Plan the design of a software component and document it
     - 1
     - |s8c|
     - 40
     - 30

   * - Review the changes in a documentation file
     - 1
     - |s9v|
     - 20
     - 1

   * - Look up an ID in a documentation file
     - 10
     - |san|
     - 1
     - 1/60

   * - Solve an implementation detail or a bug report
     - 2
     - 
     - 100
     - 100

   * - Discuss an interface with other team member consulting documentation
     - 1
     - |san|
     - 10
     - 9

   * - Describe an implementation detail or how a bug was fixed documentation
     - 2
     - |san|
     - 30
     - 20

   * - Merge contributions to a documentation file from more developers
     - 1/30
     - |sxr|
     - 30
     - 1

   * - A printout of a documentation shall be started (without printing time)
     - 1/5/100
     - |mvd|
     - 5
     - 10

   * - Create a traceability file that shows how documentation items are linked
     - 1/5/100
     - |s0t|
     - 3*480
     - 1

   * - Search for all occurrences of a name in all project files
     - 10
     - |stq|
     - 4
     - 1

   * - Replace all occurrences of a name in all project files
     - 5
     - |stq|
     - 4
     - 1

   * - Refactor and re-describe parts of code and update documentation
     - 1
     - |s8c|, |san|
     - 30
     - 20

   * - Fix a formatting issue
     - 10
     - |s45|
     - 1
     - 1/2

   * - Check for consistency of a limit values between code and documentation
     - 1
     - |s8c|
     - 2
     - 0

   * - Make the documentation of automatic tests or a test report of a test run
     - 1
     - |sgt|
     - 20
     - 10


.. stop parsing events


Result
``````

<%

import yaml
from rstdoc.dcx import rindices

with open(__file__, encoding='utf-8') as f:
    lns = f.readlines()
    ev1,ev2 = list(rindices('parsing events',lns))[:2]
    events = lns[ev1+13:ev2-1]

eventstr = '\n'.join([x[3:] for x in events]).replace('|',r'\|').replace('* -','- -')
eventdata = yaml.load(eventstr)

r1 = sum([r(N(x[1]),N(x[3])) for x in eventdata])
r2 = sum([r(N(x[1]),N(x[4])) for x in eventdata])

%>

The assumed 1 year project with 5 developers would take only {{round(r2/r1,1)}} years.

- Effort without RST: {{round(r1)}}min={{round(r1/8/60,1)}}day
- Effort with RST: {{round(r2)}}min={{round(r2/8/60,1)}}day
- Less effort (|sa7|): {{round(r2-r1)}}min={{round((r2-r1)/8/60,1)}}day

The benefit is not due to using a text editor instead of a office application to write documentation.
It is due to a good exploitation of all the possibilities opened by pure text (|s3d| and |slp|).


.. include:: _links_sphinx.rst




