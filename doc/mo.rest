.. vi: syntax=rst

==========
Motivation
==========

Documentation with RST
======================

Purpose
-------

This documenation motivates the use of RST for documenation of (software) projects.
It is at the same time an example for documenation using RST.

If you don't need any motivation in that regard, jump to the documentation of the sources: |rr1| 

This file motivates the |s3d|.

.. _`mwj`:

Productivity
------------

To have more evolution with less effort one must change the tools to better productivity.

The objective is to find a documentation format that is more productive than 
MS Office or Libre Office for technical documentation.

`DOCX`_ or `ODT`_ cannot be well integrated into a software project. 
The reason does not lie in the writing itself, 
but in the organization of information and the further development and handling of text.
They

- have low accessibility: |san|, |stq|
- have low traceability: |s9v|, |s0t|
- produce too much redundancy: |sgt|, |s8c|
- are no good for automation: |sgt|, |s8c| 

As a result:

- They lead to low productivity (|sa7|).
- The quality of the content suffers.

Code is written in a text editor. Documentation must be written with the same text editor.
It brings overhead to access information with two different tools.


.. _`mpn`:

Formatting vs Content
---------------------

.. _`m9g`:

:m9g: |s45|

The purpose of `DOCX`_ or `ODT`_, in general the `WYSIWYG`_ idea, 
is about providing easy formatting.
The information coded in a human language is surrounded by layers of formatting.

- The `DOCX`_ XML files are zipped, which makes them binary.
- The XML-based formatting is so full of formatting markup, that it is not very readable.
  This also applies to non-zipped formats like `docbook`_.

But formatting should have no importance in development.

There is a less obtrusive alternative for formatting than via XML, HTML or even TeX: 

- `light markup`_.

.. _`mgn`:

:mgn: |s86|

The content is important in documentation.

Certain content can be stored in a text database and reused in other documents via templating (|m8d|).
Data can be better integrated into text, than into `DOCX`_ or `ODT`_.

.. _`m21`:

:m21: |scf|

From a naive perspective it may seem easier to use `DOCX`_, 
but it is not,
basically due to the complex task to bring a big project to a consistent final state.

Final Version
-------------

.. _`mio`:

:mio: |scf|

The purpose of this proposal is targeted to the developement time.

After the project is over documents are 

#) archived or 
#) placed on a web server

The formats usually used, are:

#) PDF
#) HTML
#) `DOCX`_ or `ODT`_

In case the final version is a printout,
`DOCX`_ or `ODT`_ allow final formatting correction before printing.

.. _`mak`:

Parallelism
-----------

Parallel processing is faster than serial processing.
The productivity of a team increases if the team members can work in parallel.

In order for the developer to be able to work independently
he needs to be allowed to make his own decisions.

The decisions get their input from the documentation done by others 
and the information generated by the developer himself.

Every developer needs to understand the abstract goals of the project,
how the product will be used. 

The external requirements are kept 

- minimal
- mostly soft, i.e. modifiable
- with good rationale, especially for hard requirements

If a developer has an idea, a conflict or an issue, he can adapt the source code
and the documentation and the tests, also of others, to resolve the issue by himself.

The chief developer only 
- does initial coordination
- observes, i.e. reviews the changes - as other developers do, too.

The format of the documentation matters regarding independence:

- changes can be traced in the `VCS`_  (|mbc|)
- information can more easily be found via `grep`_ like tools over all files (|mvd|)
- a final document file can be decomposed into separate source files for developers

.. _`mbc`:

Traceability
------------

Trace changes
`````````````

.. _`mnn`:

:mnn: |s9v|

Language: 

    A method to code information for transfer over space or time from sender to receiver.
    Sender and receiver can be the same.

    A human language as well as a programming language 

    - define variables

    - select values (=concept) from variables

    Human languages can easily lead to misunderstanding:

    - Human languages are less formalized than programming languages.
    - Humans often wrongly assume that the receiver received 
      and properly decoded (understood) a messages.

Documentation is the description of the system in a human language.
It is meant for humans. Nevertheless it is not a novel, but more like code.

- It defines variables and values (concepts) like code.
- It undergoes the same changes as code.
- It has dependencies and a hierarchical structure like code.

Version control systems (`VCS`_) like `SVN`_ or `GIT`_ are needed to trace the changes in documentation.

Team members need to be able to follow changes.

IDs
```

For certain new concepts human language names will be necessary for
others random IDs will do. 

- A concept has a unique name or ID.
- Reference paragraphs have a unique ID.

Relations are not reflected in the names and especially not in the IDs: flat addressing.
Specifically the IDs do not have an order.

Flat and unordered IDs are more flexible, 
because they are independent of the changes in structure and order.

Jumps to target IDs in documentation work from source code and from other documentation files.


Trace dependencies
``````````````````

.. _`mw9`:

:mw9: |s0t|

Code uses identifiers for its items (variables, functions, classes, ...).

The documentation can use IDs to mark an item (paragraph, figure, table, ...).

The ID can be used to reference an item from somewhere else: m-n.
A special case is 1-n, e.g. the ID of a header comprises all IDs of the paragraphs below.

.. _`mvd`:

Accessibility
-------------

Hypertext
`````````

.. _`m33`:

:m33: |san| 

Access time: The time to access stored information.

The productivity depends much on how fast information can be found.

The access time is fastest for information stored in the brain.
The brain of most humans is very slow to memorize, though.
And the brain forgets.
Normally one can expect only the current topic to be present for immediate processing.

Related information can be quickly looked up,
if the documentation contains references that immediatly can be jumped to (`hypertext`_).
The importance of this can be seen by the immense success of `hypertext`_ in the internet.

To allow `hypertext`_ referenced items must have a unique resource ID (`URI`_).
The `IDs`_ are used for this purpose.

Search
``````

.. _`me4`:

:me4: |stq|

Another alternative to discover information is via search.

- For small to mediums sized systems normal text search like `grep`_ suffices.
- A larger text corpus needs indexing to speed up search.

Since source code and documentation describe the same system,
the same concepts and IDs are likely to occur.
Source code describes the details and is not rephrasing documentation items, though.
The concept names and IDs of documentation are expected more in source code comments than identifiers.

A search shall allow to include both 

- source code and
- documentation

.. _`m9h`:

Community
---------

.. _`mj4`:

:mj4: |s9o|

Community spreads the effort for tooling to more people.

- The commercial model makes more people dependent on one company.
  In case of `DOCX`_ there is no alternative to MS Word, 
  that renders documents in the same way,
  which makes Microsoft a monopoly leading to over-pricing.

- The open source model is a decentralized community effort:
  With software there is no effort and therefore no loss in sharing.
  One gains the effort of others.

The open source model is preferred, also because 

- one can add a feature if needed
- one can fix a bug immediately

i.e. one has more control.

The total effort is less than for the commercial model.

.. _`m62`:

Sustainability
--------------

.. _`mef`:

:mef: |sed|

The information shall be accessible

- over much time
- by many people

But if the format is only readable by one of many commercial tools,

- at some point one may not want or be able to pay the license 
- some people might use a different tool

If one would like to change the tool one cannot without substantial costs (`vendor lock-in`_).

Because of the `sustainability`_ argument, a DOCX document needs to be converted to PDF, 
e.g. before sending to someone else or maybe even when checking into a `VCS`_.
In the latter case one preduces redundant documents, both very inaccessible.

Further reading: 

| `DOCX <https://www.loc.gov/preservation/digital/formats/fdd/fdd000397.shtml>`__
| `ODT <https://www.loc.gov/preservation/digital/formats/fdd/fdd000428.shtml>`__


.. _`moc`:

Redundancy
----------

.. _`m90`:

:m90:  |sgt|, |s8c|

Redundancy: When the same information is there more often.

Less redundancy means higher `productivity`_.

Redundancy 

- needs more resources

    - more pages, more memory
    - more time to read
    - more time to write
    - more effort when changing something

- leads to inconsistencies

The reasons for redundancy are

- barrier between formats: DOCX and text, computer language and human language
- inability to link to information: no `hypertext`_
- inability to exploit functional dependencies: no `automation`_ available
- normative boilerplate texts: no `automation`_ available

.. _`mvl`:

Automation
----------

Scripting
`````````

.. _`m1p`:

:m1p: |sgt|, |s8c|

Why don't we write code in MS Word or Libre Office? Because it would be hard to parse away all the formatting.

It does not help to have a library like `Office-XML-SDK`_ or `DOM`_, because the additional complexity
through formatting elements still needs to be dealt with when parsing or creating documentation parts.

A format where formatting is less important and less obtrusive can be handled more easily via scripts.

Templates
`````````

.. _`m8d`:

:m8d: 

Many internet sites are generated with a scripting language (PHP, JS, Python, ...) that allows 

- to mix text and data or 
- to generate text from data. 

That is the idea of *templates*.

Text files can easily be generated from templates.


.. _`grep`: https://en.wikipedia.org/wiki/Grep
.. _`DOCX`: http://www.ecma-international.org/publications/standards/Ecma-376.htm
.. _`ODT`: https://en.wikipedia.org/wiki/OpenDocument
.. _`VCS`: https://en.wikipedia.org/wiki/Comparison_of_version_control_software
.. _`SVN`: https://en.wikipedia.org/wiki/Apache_Subversion
.. _`URI`: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
.. _`hypertext`: https://en.wikipedia.org/wiki/Hypertext
.. _`WYSIWYG`: https://en.wikipedia.org/wiki/WYSIWYG
.. _`vendor lock-in`: https://en.wikipedia.org/wiki/Vendor_lock-in
.. _`light markup`: https://en.wikipedia.org/wiki/Lightweight_markup_language
.. _`Office-XML-SDK`: https://github.com/OfficeDev/Open-XML-SDK
.. _`DOM`: https://en.wikipedia.org/wiki/Document_Object_Model
.. _`PDF`: https://en.wikipedia.org/wiki/Portable_Document_Format
.. _`LaTex`: https://en.wikipedia.org/wiki/LaTeX
.. _`include`: https://github.com/jgm/pandoc/issues/4160
.. _`constraints`: https://everypageispageone.com/2016/06/05/why-we-need-constrainable-lightweight-markup-languages/
.. _`document markup languages`: https://en.wikipedia.org/wiki/List_of_document_markup_languages
.. _`HTML`: https://en.wikipedia.org/wiki/HTML
.. _`GIT`: https://en.wikipedia.org/wiki/Git
.. _`Ctags`: https://github.com/universal-ctags/ctags/blob/master/parsers/rst.c
.. _`Pandoc`: https://pandoc.org/
.. _`Docutils`: http://docutils.sourceforge.net/
.. _`Sphinx`: http://www.sphinx-doc.org/en/stable/
.. _`RST`: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
.. _`light markup`: https://en.wikipedia.org/wiki/Lightweight_markup_language
.. _`rstdoc`: https://github.com/rpuntaie/rstdoc
.. _`dcx.py`: https://github.com/rpuntaie/rstdoc/blob/master/rstdoc/dcx.py
.. _`rstdcx`: https://github.com/rpuntaie/rstdoc/blob/master/rstdoc/dcx.py
.. _`waf`: https://github.com/waf-project/waf
.. _`tikz`: http://mirror.kumi.systems/ctan/graphics/pgf/base/doc/pgfmanual.pdf
.. _`LaTex`: https://en.wikipedia.org/wiki/LaTeX
.. _`substitutions`: http://docutils.sourceforge.net/docs/ref/rst/directives.html#replacement-text
.. _`docbook`: https://en.wikipedia.org/wiki/DocBook
.. _`documentation generator`: https://en.wikipedia.org/wiki/Comparison_of_documentation_generators

.. include:: _links_sphinx.rst

